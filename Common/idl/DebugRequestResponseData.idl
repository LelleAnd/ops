package opsidls;

class DebugRequestResponseData
{
    /* Type of entity to talk to: Debug = 0, Participant = 1, Publisher = 2, Subscriber = 3, ... */
    const int ent_Debug = 0;
    const int ent_Part = 1;
    const int ent_Pub = 2;
    const int ent_Sub = 3;

    int    Entity;

    /* Name of entity */
    string Name;

    /* Commands and parameters
       0 = Response
       1 = Request status

         Debug:
       2 = List, Param1 = 1 [instance key], Param1 = 2 [Publishers], Param1 = 3 [Subscribers]
      50 = Generic command forwarded to connected application code, if any.
             Input data: Param1, Param3 and Objs
             Response data: See below

         Participant:
       TBD

         Publisher:
       2 = Enable, Param1 = 0 [False] / 1 [True]
       3 = PubId, Increment counter with Param1
       4 = Skip, Skip Param1 number of sends
       5 = Send, Send message in Objs[0] directly
           NOTE: Only works if DebugRequestResponseData + message is less than 60000 bytes in size
       6 = Send, Send message(s) in Objs instead of next ordinary send(s)
           NOTE: Only works if DebugRequestResponseData + message(s) is less than 60000 bytes in size

         Subcriber:
       2 = Enable, Param1 = 0 [False] / 1 [True]
       3 = Filter, Set key filter from Param3            (TODO)
       4 = Skip, Skip Param1 number of received messages
       Future: Be able to change port dynamically to enable injection of a custom filter
    */
    const int cmd_Response = 0;
    const int cmd_ReqStatus = 1;

    const int cmd_Dbg_List = 2;
    const int cmd_Dbg_Generic = 50;

    const int cmd_Pub_Enable = 2;
    const int cmd_Pub_PubId = 3;
    const int cmd_Pub_Skip = 4;
    const int cmd_Pub_SendDirect = 5;
    const int cmd_Pub_SendReplace = 6;

    const int cmd_Sub_Enable = 2;
    const int cmd_Sub_Filter = 3;
    const int cmd_Sub_Skip = 4;

    int      Command;
    long     Param1;
    string[] Param3;
    virtual  OPSObject[] Objs;

    /* Response to Request with results
         Debug:
           Result1 = 1, Param3 contains this instance filter key
           Result1 = 2, List in Param3 contains Publishers
           Result1 = 3, List in Param3 contains subscribers
           Result1 = 50, Response to generic Command
             Response data: Param1, Param3, Objs, Enabled, Result2 & Result3

         Participant:
           TBD

         Publisher:
           Enabled or not
           Result1 = Publication Counter
           Result2 = Number of sends left to skip
           Result3 = True if fejk message stored for sending

         Subcriber:
           Enabled or not
           Result1 = Number of messages received
           Result2 = Number of receives left to skip
           Result3 = True if Key filter active
    */
    boolean  Enabled;
    long     Result1;
    long     Result2;
    boolean  Result3;
}

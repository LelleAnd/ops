
options
{
  STATIC = false;
}

PARSER_BEGIN(IDLParser)
package parsing.javaccparser;

import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import parsing.IDLField;
import parsing.IDLEnumType;
import parsing.javaccparser.ParseException;

public class IDLParser
{
    private IDLEnumType currentIDLEnumType = null;
    private IDLField currentIDLField;
    private Token currentToken = null;
    private ArrayList<String> enumTypes = new ArrayList<String>();

    public ParserEvent<String> packageDeclareEvent = new ParserEvent<String>();
    public ParserEvent<String> idlDeclareEvent = new ParserEvent<String>();
    public ParserEvent<String> enumDeclareEvent = new ParserEvent<String>();
    public ParserEvent<String> idlCloseEvent = new ParserEvent<String>();
    public ParserEvent<String> enumCloseEvent = new ParserEvent<String>();
    public ParserEvent<IDLField> fieldDeclareEvent = new ParserEvent<IDLField>();
    public ParserEvent<IDLEnumType> enumTypeDeclareEvent = new ParserEvent<IDLEnumType>();
    public ParserEvent<String> extendsEvent = new ParserEvent<String>();
    public ParserEvent<String> enumElementEvent = new ParserEvent<String>();
    public ParserEvent<String> commentEvent = new ParserEvent<String>();
    public ParserEvent<String> directiveEvent = new ParserEvent<String>();

    public void genErrorMessage(String msg) throws parsing.javaccparser.ParseException
    {
        if (currentToken != null) {
            msg += " at line " + currentToken.beginLine + ", column " + currentToken.beginColumn + ".";
        } else {
            msg += ".";
        }
        throw new parsing.javaccparser.ParseException(msg);
    }

}

PARSER_END(IDLParser)


/*
 * Tokens to ignore in the BNF follow.
 */

SKIP :
{
  < " " >
| < "\t" >
| < "\n" >
| < "\r" >
| < "//" (~["@"]) (~["\n"])* "\n" >
| < "#" ([" ","\t"])* (["0"-"9"])+
    (([" ","\t"])* "\"" (~["\""])+ "\""
           ([" ","\t"])* (["0"-"9"])* ([" ","\t"])* (["0"-"9"])*)? "\n" >
}

/* Production 1 */

void specification() :
{}
{
    definition()
|
    (<ANOTATION>)+
}

/* Production 2 */

void definition() :
{}
{
  "package" module() ";" (body_declare())+ <EOF>
}

void body_declare():
{String comment = ""; }
{
    type_declare()
|
    comment = <ANOTATION>.image
    {commentEvent.fireEvent(comment);}
}

void type_declare():
{}
{
    LOOKAHEAD(2)
    ( directive_declare() )*

    struct_type()
|
    enum_type()
}

void directive_declare():
{ String directive = ""; String tName = "";}
{
    "//@" tName = identifier() {directive += tName;} [ "=" {directive += " = ";} tName = directive_value() {directive += tName;} ]
    {
      directiveEvent.fireEvent(directive);
    }
}

String directive_value():
{ String value = ""; Long val = 0L; Long val2 = 0L; Double dval = 0.0; Double dval2 = 0.0; boolean range = false;}
{
    value = <ID>.image {return "ID: " + value;}
|
    val = integer_literal() [ ".." val2 = integer_literal() {range=true;}]
    {
        if (!range) { return "int: " + Long.toString(val); }
        return "int: " + Long.toString(val) + ".." + Long.toString(val2);
    }
|
    dval = floating_pt_literal() [ ".." dval2 = floating_pt_literal() {range=true;}]
    {
        if (!range) { return "float: " + Double.toString(dval); }
        return "float: " + Double.toString(dval) + ".." + Double.toString(dval2);
    }
|
    value = boolean_literal() {return "bool: " + value;}
}

/* Production 3 */

String module() :
{ String packName = ""; String tName = "";}
{
   tName = identifier() {packName += tName;} (  "." {packName += ".";} tName = identifier() {packName += tName;} )*
   {
        packageDeclareEvent.fireEvent(packName);
        return packName;
    }
}

String struct_type() :
{
    String name = "";
    String parName = "";
}
{
  "class" name=identifier() {idlDeclareEvent.fireEvent(name);}  member_list()
  {
    {idlCloseEvent.fireEvent(name);}
    ///System.out.println("struct " + name);
    return name;
  }
}

String enum_type() :
{String name = "";}
{
    "enum" name=identifier()  {enumDeclareEvent.fireEvent(name);} "{" enum_body() "}"
    {
        enumCloseEvent.fireEvent(name);
        return name;
    }
}

void enum_body() :
{String tName = "";String ANOTATION = ""; String tANOTATION = ""; }
{
  tName = identifier() {enumElementEvent.fireEvent(tName);} ( "," tName = identifier() {enumElementEvent.fireEvent(tName);})*
}


/* Production 51 */

void member_list() :
{String tName = "";}
{
    "extends" tName = idl_type() {extendsEvent.fireEvent(tName);} "{"( member() )* "}"
|
    LOOKAHEAD(2)
    (
        "{" ( member() )* "}"
    )
}

/* Production 52 */

void member() :
{String typeName = ""; String fieldName = ""; String comment = ""; String tComment = ""; }
{
    {currentIDLField = new IDLField(fieldName, "");}

    [ ( directive_declare() )+ ]

    typeName = type_spec() fieldName = declarators(currentIDLField) ";"
    {
        if(fieldName.contains("[") && fieldName.contains("]"))
        {
            typeName = typeName.trim() + fieldName.substring(fieldName.indexOf("["), fieldName.indexOf("]") + 1);
            fieldName = fieldName.replace("[", "").trim();
            fieldName = fieldName.replace("]", "").trim();
            //currentIDLField.setArray(true);
        }

        currentIDLField.setName(fieldName);
        currentIDLField.setType(typeName);
        fieldDeclareEvent.fireEvent(currentIDLField);
    }
|
    {currentIDLField = new IDLField(fieldName, "");}

    "const" const_decl() ";"
|
    {currentIDLEnumType = new IDLEnumType(typeName, "");}

    "enum" enum_decl() ";"
|
    comment = <ANOTATION>.image
    {commentEvent.fireEvent(comment);}
}

void enum_decl() :
{ String typeName = ""; String eName = ""; }
{
    typeName = identifier() "{"
            eName = identifier() { currentIDLEnumType.getEnumNames().add(eName); }
            ( "," eName = identifier() { currentIDLEnumType.getEnumNames().add(eName); })*
        "}"
    {
        enumTypes.add(typeName);  // So we can check if type is internal or an IDLType
        currentIDLEnumType.setName(typeName);
        enumTypeDeclareEvent.fireEvent(currentIDLEnumType);
    }
}

void const_decl() :
{ String typeName = ""; String fieldName = ""; String cvalue = ""; Long cval = 0L; double dval = 0.0; }
{
    typeName = integer_type() fieldName = identifier() "=" cval = integer_literal()
    {
        cvalue = Long.toString(cval);
        if (typeName.equals("byte") && ((cval < 0) || (cval > 255))) {
            genErrorMessage("Illegal byte value '" + cvalue + "'");
        }
        if (typeName.equals("short") && ((cval < -32768) || (cval > 32767))) {
            genErrorMessage("Illegal short value '" + cvalue + "'");
        }
        if (typeName.equals("int") && ((cval < Integer.MIN_VALUE) || (cval > Integer.MAX_VALUE))) {
            genErrorMessage("Illegal int value '" + cvalue + "'");
        }
        currentIDLField.setName(fieldName);
        currentIDLField.setType(typeName);
        currentIDLField.setValue(cvalue);
        currentIDLField.setStatic(true);
        fieldDeclareEvent.fireEvent(currentIDLField);
    }
|
    typeName = floating_pt_type() fieldName = identifier() "=" dval = floating_pt_literal()
    {
        cvalue = Double.toString(dval);
        if (typeName.equals("float") && ((dval < -Float.MAX_VALUE) || (dval > Float.MAX_VALUE))) {
            genErrorMessage("Illegal float value '" + cvalue + "'");
        }
        currentIDLField.setName(fieldName);
        currentIDLField.setType(typeName);
        currentIDLField.setValue(cvalue);
        currentIDLField.setStatic(true);
        fieldDeclareEvent.fireEvent(currentIDLField);
    }
|
    typeName = string_type() fieldName = identifier() "=" cvalue = string_literal()
    {
        currentIDLField.setName(fieldName);
        currentIDLField.setType(typeName);
        currentIDLField.setValue(cvalue);
        currentIDLField.setStatic(true);
        fieldDeclareEvent.fireEvent(currentIDLField);
    }
|
    typeName = boolean_type() fieldName = identifier() "=" cvalue = boolean_literal()
    {
        currentIDLField.setName(fieldName);
        currentIDLField.setType(typeName);
        currentIDLField.setValue(cvalue);
        currentIDLField.setStatic(true);
        fieldDeclareEvent.fireEvent(currentIDLField);
    }
}

String identifier() :
{ String name = ""; }
{
    name = <ID>.image
    { return name; }
}

String declarators(IDLField currentIDLField) :
{ String ret = ""; String size = ""; currentToken = null; }
{
    ret = declarator()
    {return ret;}
|
    "[" [ currentToken = <DECIMALINT> ] "]" ret = declarator()
    {
        if (currentToken != null) size = currentToken.image;
        if (!size.equals("")) {
            int asize = Integer.parseInt(size);
            if (asize <= 0) {
                genErrorMessage("Illegal array size '" + asize + "'");
            }
            currentIDLField.setArraySize(asize);
        }
        return "[] " + ret;
    }
}

/* Production 35 */

String declarator() :
{String ret = "";}
{
    ret = simple_declarator()
    {return ret;}
}

String type_spec() :
{String ret = "";}
{
    ret = simple_type_spec()
    {return ret;}
}

String simple_type_spec() :
{String ret = "";}
{
    ret = base_type_spec()
    {return ret;}
}

String complex_type_spec() :
{String ret = "";}
{
    (ret = base_type_spec() fixed_array_size())
    {return ret;}
}

String base_type_spec() :
{String typeName = "";}
{
  typeName = floating_pt_type()
  {currentIDLField.setFloatType(true); return typeName;}
|
  typeName = integer_type()
  {currentIDLField.setIntType(true); return typeName;}
|
  typeName = boolean_type()
  {return typeName;}
|
  typeName = string_type()
  {return typeName;}
|
  typeName = idl_type()
  {
    if (enumTypes.contains(typeName)) {
      currentIDLField.setEnumType(true);
    } else {
      currentIDLField.setIdlType(true);
    }
    return typeName;
  }
|
  typeName = abs_idl_type()
  {
    currentIDLField.setIdlType(true);
    currentIDLField.setAbstract(true);
    return typeName;
  }
}

String idl_type() :
{ String className = ""; String tName = ""; String fieldName = "";}
{
   tName = identifier() {className += tName;} (  "." {className += ".";} tName = identifier() {className += tName;} )*
   {
        return className;
   }
}

String abs_idl_type() :
{ String className = ""; String tName = ""; String fieldName = "";}
{
   "virtual" tName = identifier() {className += tName;} (  "." {className += ".";} tName = identifier() {className += tName;} )*
   {
        return className;
   }
}

String idl_type_array() :
{ String className = ""; String tName = ""; String fieldName = "";}
{
    ( className = idl_type() "[" "]")
    {
        return className;
    }
}

String simple_declarator() :
{String ret = "";}
{
    ret = identifier()
    {return ret;}
}

String complex_declarator() :
{String ret = "";}
{
    ret = array_declarator()
    {return ret;}
}

String array_declarator() :
{String ret = "";}
{
    ( fixed_array_size() ) ret = identifier()
    {return ret ;}
}

/* Production 64 */

void fixed_array_size() :
{}
{
  "[" "]"
}

/* Production 38 */

String floating_pt_type() :
{}
{
  "float"
  {return "float" ;}
|
  "double"
  {return "double" ;}
}

/* Production 39 */

String integer_type() :
{}
{
  "int"
  {return "int" ;}
|
  "short"
  {return "short" ;}
|
  "long"
  {return "long" ;}
|
  "byte"
  {return "byte" ;}
}

/* Production 47 */

String boolean_type() :
{}
{
  "boolean"
  {return "boolean" ;}
}

String string_type() :
{ String size = ""; currentToken = null; }
{
  "string" [ "<" currentToken = <DECIMALINT> ">" ]
  {
    if (currentToken != null) size = currentToken.image;
    if (!size.equals("")) {
      int ssize = Integer.parseInt(size);
      if (ssize <= 0) {
        genErrorMessage("Illegal string size '" + ssize + "'");
      }
      currentIDLField.setStringSize(ssize);
    }
    return "string" ;
  }
}


/* Production 48 */

long integer_literal() :
{ String value = ""; currentToken = null; }
{
  currentToken = <OCTALINT>
  { if (currentToken != null) value = currentToken.image;
    long i = Long.parseLong(value,8); return i; }
|
  currentToken = <DECIMALINT>
  { if (currentToken != null) value = currentToken.image;
    long i = Long.parseLong(value); return i; }
|
  currentToken = <HEXADECIMALINT>
  { if (currentToken != null) value = currentToken.image;
    value = value.substring(2); long i = Long.parseLong(value,16); return i; }
}

String string_literal() :
{String value = ""; }
{
  value = <STRING>.image
  {return value; }
}

void character_literal() :
{}
{
  <CHARACTER>
}

double floating_pt_literal() :
{ String value = ""; currentToken = null; }
{
  currentToken = <FLOATONE>
  { if (currentToken != null) value = currentToken.image;
    double d = Double.parseDouble(value); return d; }
|
  currentToken = <FLOATTWO>
  { if (currentToken != null) value = currentToken.image;
    double d = Double.parseDouble(value); return d; }
}

String boolean_literal() :
{}
{
  "true"
  {return "true" ;}
|
  "false"
  {return "false" ;}
}

TOKEN :
{
  <  ID : ["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
| <  OCTALINT : "0" (["0"-"7"])* >
| <  DECIMALINT : ("-")? ["1"-"9"] (["0"-"9"])* >
| <  HEXADECIMALINT : ("0x"|"0X") (["0"-"9","a"-"f","A"-"F"])+ >
| <  FLOATONE : ("-")? ((["0"-"9"])+ "." (["0"-"9"])* | (["0"-"9"])* "." (["0"-"9"])+)
   (["e","E"] (["-","+"])? (["0"-"9"])+)? >
| <  FLOATTWO : ("-")? (["0"-"9"])+ ["e","E"] (["-","+"])?
   (["0"-"9"])+ >
| <  CHARACTER : "'"
   (   (~["'","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )
   "'" >
| <  STRING : "\""
   ( ( ~["\"","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )*
   "\"" >
|
    < ANOTATION: "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

/* IDLParser.java */
/* Generated By:JavaCC: Do not edit this line. IDLParser.java */
package parsing.javaccparser;

import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import parsing.IDLField;
import parsing.IDLEnumType;
import parsing.javaccparser.ParseException;

public class IDLParser implements IDLParserConstants {
    private IDLEnumType currentIDLEnumType = null;
    private IDLField currentIDLField;
    private Token currentToken = null;
    private ArrayList<String> enumTypes = new ArrayList<String>();

    public ParserEvent<String> packageDeclareEvent = new ParserEvent<String>();
    public ParserEvent<String> idlDeclareEvent = new ParserEvent<String>();
    public ParserEvent<String> enumDeclareEvent = new ParserEvent<String>();
    public ParserEvent<String> idlCloseEvent = new ParserEvent<String>();
    public ParserEvent<String> enumCloseEvent = new ParserEvent<String>();
    public ParserEvent<IDLField> fieldDeclareEvent = new ParserEvent<IDLField>();
    public ParserEvent<IDLEnumType> enumTypeDeclareEvent = new ParserEvent<IDLEnumType>();
    public ParserEvent<String> extendsEvent = new ParserEvent<String>();
    public ParserEvent<String> enumElementEvent = new ParserEvent<String>();
    public ParserEvent<String> commentEvent = new ParserEvent<String>();
    public ParserEvent<String> directiveEvent = new ParserEvent<String>();

    public void genErrorMessage(String msg) throws parsing.javaccparser.ParseException
    {
        if (currentToken != null) {
            msg += " at line " + currentToken.beginLine + ", column " + currentToken.beginColumn + ".";
        } else {
            msg += ".";
        }
        throw new parsing.javaccparser.ParseException(msg);
    }

/* Production 1 */
  final public 
void specification() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 7:{
      definition();
      break;
      }
    case ANOTATION:{
      label_1:
      while (true) {
        jj_consume_token(ANOTATION);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ANOTATION:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 2 */
  final public 
void definition() throws ParseException {
    jj_consume_token(7);
    module();
    jj_consume_token(8);
    label_2:
    while (true) {
      body_declare();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 9:
      case 13:
      case 14:
      case ANOTATION:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(0);
  }

  final public void body_declare() throws ParseException {String comment = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 9:
    case 13:
    case 14:{
      type_declare();
      break;
      }
    case ANOTATION:{
      comment = jj_consume_token(ANOTATION).image;
commentEvent.fireEvent(comment);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void type_declare() throws ParseException {
    if (jj_2_1(2)) {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 9:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        directive_declare();
      }
      struct_type();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 14:{
        enum_type();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void directive_declare() throws ParseException {String directive = ""; String tName = "";
    jj_consume_token(9);
    tName = identifier();
directive += tName;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 10:{
      jj_consume_token(10);
directive += " = ";
      tName = directive_value();
directive += tName;
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
directiveEvent.fireEvent(directive);
  }

  final public String directive_value() throws ParseException {String value = ""; Long val = 0L; Long val2 = 0L; Double dval = 0.0; Double dval2 = 0.0; boolean range = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      value = jj_consume_token(ID).image;
{if ("" != null) return "ID: " + value;}
      break;
      }
    case OCTALINT:
    case DECIMALINT:
    case HEXADECIMALINT:{
      val = integer_literal();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 11:{
        jj_consume_token(11);
        val2 = integer_literal();
range=true;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
if (!range) { {if ("" != null) return "int: " + Long.toString(val);} }
        {if ("" != null) return "int: " + Long.toString(val) + ".." + Long.toString(val2);}
      break;
      }
    case FLOATONE:
    case FLOATTWO:{
      dval = floating_pt_literal();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 11:{
        jj_consume_token(11);
        dval2 = floating_pt_literal();
range=true;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
if (!range) { {if ("" != null) return "float: " + Double.toString(dval);} }
        {if ("" != null) return "float: " + Double.toString(dval) + ".." + Double.toString(dval2);}
      break;
      }
    case 33:
    case 34:{
      value = boolean_literal();
{if ("" != null) return "bool: " + value;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Production 3 */
  final public 
String module() throws ParseException {String packName = ""; String tName = "";
    tName = identifier();
packName += tName;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 12:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(12);
packName += ".";
      tName = identifier();
packName += tName;
    }
packageDeclareEvent.fireEvent(packName);
        {if ("" != null) return packName;}
    throw new Error("Missing return statement in function");
  }

  final public String struct_type() throws ParseException {String name = "";
    String parName = "";
    jj_consume_token(13);
    name = identifier();
idlDeclareEvent.fireEvent(name);
    member_list();
{idlCloseEvent.fireEvent(name);}
    ///System.out.println("struct " + name);
    {if ("" != null) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String enum_type() throws ParseException {String name = "";
    jj_consume_token(14);
    name = identifier();
enumDeclareEvent.fireEvent(name);
    jj_consume_token(15);
    enum_body();
    jj_consume_token(16);
enumCloseEvent.fireEvent(name);
        {if ("" != null) return name;}
    throw new Error("Missing return statement in function");
  }

  final public void enum_body() throws ParseException {String tName = "";String ANOTATION = ""; String tANOTATION = "";
    tName = identifier();
enumElementEvent.fireEvent(tName);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 17:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      jj_consume_token(17);
      tName = identifier();
enumElementEvent.fireEvent(tName);
    }
  }

/* Production 51 */
  final public 
void member_list() throws ParseException {String tName = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 18:{
      jj_consume_token(18);
      tName = idl_type();
extendsEvent.fireEvent(tName);
      jj_consume_token(15);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 9:
        case 14:
        case 19:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case ID:
        case ANOTATION:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        member();
      }
      jj_consume_token(16);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_2(2)) {
        jj_consume_token(15);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 9:
          case 14:
          case 19:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case ID:
          case ANOTATION:{
            ;
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            break label_7;
          }
          member();
        }
        jj_consume_token(16);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/* Production 52 */
  final public 
void member() throws ParseException {String typeName = ""; String fieldName = ""; String comment = ""; String tComment = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 9:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case ID:{
currentIDLField = new IDLField(fieldName, "");
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 9:{
        label_8:
        while (true) {
          directive_declare();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 9:{
            ;
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            break label_8;
          }
        }
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      typeName = type_spec();
      fieldName = declarators(currentIDLField);
      jj_consume_token(8);
if(fieldName.contains("[") && fieldName.contains("]"))
        {
            typeName = typeName.trim() + fieldName.substring(fieldName.indexOf("["), fieldName.indexOf("]") + 1);
            fieldName = fieldName.replace("[", "").trim();
            fieldName = fieldName.replace("]", "").trim();
            //currentIDLField.setArray(true);
        }

        currentIDLField.setName(fieldName);
        currentIDLField.setType(typeName);
        fieldDeclareEvent.fireEvent(currentIDLField);
      break;
      }
    case 19:{
currentIDLField = new IDLField(fieldName, "");
      jj_consume_token(19);
      const_decl();
      jj_consume_token(8);
      break;
      }
    case 14:{
currentIDLEnumType = new IDLEnumType(typeName, "");
      jj_consume_token(14);
      enum_decl();
      jj_consume_token(8);
      break;
      }
    case ANOTATION:{
      comment = jj_consume_token(ANOTATION).image;
commentEvent.fireEvent(comment);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void enum_decl() throws ParseException {String typeName = ""; String eName = "";
    typeName = identifier();
    jj_consume_token(15);
    eName = identifier();
currentIDLEnumType.getEnumNames().add(eName);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 17:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
      jj_consume_token(17);
      eName = identifier();
currentIDLEnumType.getEnumNames().add(eName);
    }
    jj_consume_token(16);
enumTypes.add(typeName);  // So we can check if type is internal or an IDLType
        currentIDLEnumType.setName(typeName);
        enumTypeDeclareEvent.fireEvent(currentIDLEnumType);
  }

  final public void const_decl() throws ParseException {String typeName = ""; String fieldName = ""; String cvalue = ""; Long cval = 0L; double dval = 0.0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 25:
    case 26:
    case 27:
    case 28:{
      typeName = integer_type();
      fieldName = identifier();
      jj_consume_token(10);
      cval = integer_literal();
cvalue = Long.toString(cval);
        if (typeName.equals("byte") && ((cval < 0) || (cval > 255))) {
            genErrorMessage("Illegal byte value '" + cvalue + "'");
        }
        if (typeName.equals("short") && ((cval < -32768) || (cval > 32767))) {
            genErrorMessage("Illegal short value '" + cvalue + "'");
        }
        if (typeName.equals("int") && ((cval < Integer.MIN_VALUE) || (cval > Integer.MAX_VALUE))) {
            genErrorMessage("Illegal int value '" + cvalue + "'");
        }
        currentIDLField.setName(fieldName);
        currentIDLField.setType(typeName);
        currentIDLField.setValue(cvalue);
        currentIDLField.setStatic(true);
        fieldDeclareEvent.fireEvent(currentIDLField);
      break;
      }
    case 23:
    case 24:{
      typeName = floating_pt_type();
      fieldName = identifier();
      jj_consume_token(10);
      dval = floating_pt_literal();
cvalue = Double.toString(dval);
        if (typeName.equals("float") && ((dval < -Float.MAX_VALUE) || (dval > Float.MAX_VALUE))) {
            genErrorMessage("Illegal float value '" + cvalue + "'");
        }
        currentIDLField.setName(fieldName);
        currentIDLField.setType(typeName);
        currentIDLField.setValue(cvalue);
        currentIDLField.setStatic(true);
        fieldDeclareEvent.fireEvent(currentIDLField);
      break;
      }
    case 30:{
      typeName = string_type();
      fieldName = identifier();
      jj_consume_token(10);
      cvalue = string_literal();
currentIDLField.setName(fieldName);
        currentIDLField.setType(typeName);
        currentIDLField.setValue(cvalue);
        currentIDLField.setStatic(true);
        fieldDeclareEvent.fireEvent(currentIDLField);
      break;
      }
    case 29:{
      typeName = boolean_type();
      fieldName = identifier();
      jj_consume_token(10);
      cvalue = boolean_literal();
currentIDLField.setName(fieldName);
        currentIDLField.setType(typeName);
        currentIDLField.setValue(cvalue);
        currentIDLField.setStatic(true);
        fieldDeclareEvent.fireEvent(currentIDLField);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String identifier() throws ParseException {String name = "";
    name = jj_consume_token(ID).image;
{if ("" != null) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String declarators(IDLField currentIDLField) throws ParseException {String ret = ""; String size = ""; currentToken = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      ret = declarator();
{if ("" != null) return ret;}
      break;
      }
    case 20:{
      jj_consume_token(20);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DECIMALINT:{
        currentToken = jj_consume_token(DECIMALINT);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(21);
      ret = declarator();
if (currentToken != null) size = currentToken.image;
        if (!size.equals("")) {
            int asize = Integer.parseInt(size);
            if (asize <= 0) {
                genErrorMessage("Illegal array size '" + asize + "'");
            }
            currentIDLField.setArraySize(asize);
        }
        {if ("" != null) return "[] " + ret;}
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Production 35 */
  final public 
String declarator() throws ParseException {String ret = "";
    ret = simple_declarator();
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public String type_spec() throws ParseException {String ret = "";
    ret = simple_type_spec();
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public String simple_type_spec() throws ParseException {String ret = "";
    ret = base_type_spec();
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public String complex_type_spec() throws ParseException {String ret = "";
    ret = base_type_spec();
    fixed_array_size();
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public String base_type_spec() throws ParseException {String typeName = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 23:
    case 24:{
      typeName = floating_pt_type();
currentIDLField.setFloatType(true); {if ("" != null) return typeName;}
      break;
      }
    case 25:
    case 26:
    case 27:
    case 28:{
      typeName = integer_type();
currentIDLField.setIntType(true); {if ("" != null) return typeName;}
      break;
      }
    case 29:{
      typeName = boolean_type();
{if ("" != null) return typeName;}
      break;
      }
    case 30:{
      typeName = string_type();
currentIDLField.setStringType(true); {if ("" != null) return typeName;}
      break;
      }
    case ID:{
      typeName = idl_type();
if (enumTypes.contains(typeName)) {
      currentIDLField.setEnumType(true);
    } else {
      currentIDLField.setIdlType(true);
    }
    {if ("" != null) return typeName;}
      break;
      }
    case 22:{
      typeName = abs_idl_type();
currentIDLField.setIdlType(true);
    currentIDLField.setAbstract(true);
    {if ("" != null) return typeName;}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String idl_type() throws ParseException {String className = ""; String tName = ""; String fieldName = "";
    tName = identifier();
className += tName;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 12:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_10;
      }
      jj_consume_token(12);
className += ".";
      tName = identifier();
className += tName;
    }
{if ("" != null) return className;}
    throw new Error("Missing return statement in function");
  }

  final public String abs_idl_type() throws ParseException {String className = ""; String tName = ""; String fieldName = "";
    jj_consume_token(22);
    tName = identifier();
className += tName;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 12:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_11;
      }
      jj_consume_token(12);
className += ".";
      tName = identifier();
className += tName;
    }
{if ("" != null) return className;}
    throw new Error("Missing return statement in function");
  }

  final public String idl_type_array() throws ParseException {String className = ""; String tName = ""; String fieldName = "";
    className = idl_type();
    jj_consume_token(20);
    jj_consume_token(21);
{if ("" != null) return className;}
    throw new Error("Missing return statement in function");
  }

  final public String simple_declarator() throws ParseException {String ret = "";
    ret = identifier();
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public String complex_declarator() throws ParseException {String ret = "";
    ret = array_declarator();
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public String array_declarator() throws ParseException {String ret = "";
    fixed_array_size();
    ret = identifier();
{if ("" != null) return ret ;}
    throw new Error("Missing return statement in function");
  }

/* Production 64 */
  final public 
void fixed_array_size() throws ParseException {
    jj_consume_token(20);
    jj_consume_token(21);
  }

/* Production 38 */
  final public 
String floating_pt_type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 23:{
      jj_consume_token(23);
{if ("" != null) return "float" ;}
      break;
      }
    case 24:{
      jj_consume_token(24);
{if ("" != null) return "double" ;}
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Production 39 */
  final public 
String integer_type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 25:{
      jj_consume_token(25);
{if ("" != null) return "int" ;}
      break;
      }
    case 26:{
      jj_consume_token(26);
{if ("" != null) return "short" ;}
      break;
      }
    case 27:{
      jj_consume_token(27);
{if ("" != null) return "long" ;}
      break;
      }
    case 28:{
      jj_consume_token(28);
{if ("" != null) return "byte" ;}
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Production 47 */
  final public 
String boolean_type() throws ParseException {
    jj_consume_token(29);
{if ("" != null) return "boolean" ;}
    throw new Error("Missing return statement in function");
  }

  final public String string_type() throws ParseException {String size = ""; currentToken = null;
    jj_consume_token(30);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 31:{
      jj_consume_token(31);
      currentToken = jj_consume_token(DECIMALINT);
      jj_consume_token(32);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
if (currentToken != null) size = currentToken.image;
    if (!size.equals("")) {
      int ssize = Integer.parseInt(size);
      if (ssize <= 0) {
        genErrorMessage("Illegal string size '" + ssize + "'");
      }
      currentIDLField.setStringSize(ssize);
    }
    {if ("" != null) return "string" ;}
    throw new Error("Missing return statement in function");
  }

/* Production 48 */
  final public 
long integer_literal() throws ParseException {String value = ""; currentToken = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OCTALINT:{
      currentToken = jj_consume_token(OCTALINT);
if (currentToken != null) value = currentToken.image;
    long i = Long.parseLong(value,8); {if ("" != null) return i;}
      break;
      }
    case DECIMALINT:{
      currentToken = jj_consume_token(DECIMALINT);
if (currentToken != null) value = currentToken.image;
    long i = Long.parseLong(value); {if ("" != null) return i;}
      break;
      }
    case HEXADECIMALINT:{
      currentToken = jj_consume_token(HEXADECIMALINT);
if (currentToken != null) value = currentToken.image;
    value = value.substring(2); long i = Long.parseLong(value,16); {if ("" != null) return i;}
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String string_literal() throws ParseException {String value = "";
    value = jj_consume_token(STRING).image;
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final public void character_literal() throws ParseException {
    jj_consume_token(CHARACTER);
  }

  final public double floating_pt_literal() throws ParseException {String value = ""; currentToken = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLOATONE:{
      currentToken = jj_consume_token(FLOATONE);
if (currentToken != null) value = currentToken.image;
    double d = Double.parseDouble(value); {if ("" != null) return d;}
      break;
      }
    case FLOATTWO:{
      currentToken = jj_consume_token(FLOATTWO);
if (currentToken != null) value = currentToken.image;
    double d = Double.parseDouble(value); {if ("" != null) return d;}
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String boolean_literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 33:{
      jj_consume_token(33);
{if ("" != null) return "true" ;}
      break;
      }
    case 34:{
      jj_consume_token(34);
{if ("" != null) return "false" ;}
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(26)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(ANOTATION)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(14)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(23)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(22)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(9)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    if (jj_3R_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(13)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(29)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_12()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(15)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_14()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(16)) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(28)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public IDLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x80,0x6200,0x6200,0x200,0x4000,0x400,0x800,0x800,0x0,0x1000,0x20000,0x7fc84200,0x7fc84200,0x40000,0x200,0x200,0x7fc84200,0x20000,0x7f800000,0x0,0x100000,0x7fc00000,0x1000,0x1000,0x1800000,0x1e000000,0x80000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800,0x800,0x800,0x800,0x0,0x0,0x0,0x0,0x0,0x1fe,0x0,0x0,0x808,0x808,0x0,0x0,0x0,0x808,0x0,0x0,0x20,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x70,0x180,0x6,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public IDLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public IDLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new IDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public IDLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new IDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public IDLParser(IDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(IDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
